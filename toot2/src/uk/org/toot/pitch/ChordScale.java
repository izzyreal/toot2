/* Generated by TooT */

package uk.org.toot.pitch;

import java.util.ArrayList;
import java.util.List;

import static uk.org.toot.pitch.Interval.*;

public class ChordScale extends Key
{
    protected int poly = 3 ; // default to triads

    /**
     * Constructor
     */
    public ChordScale(int root, Scale scale, int poly) {
        super(root, scale) ;
        this.poly = poly ;
    }

    public ChordScale(Key key, int poly) {
        this(key.getRoot(), key.getScale(), poly) ;
    }

    public ChordScale(int root) {
        super(root) ;
    }

    public ChordScale() {
        this(PitchClass.value("C"), Scale.Major, 3) ;
    }

    public static List from(Key key) {
		List<ChordScale> match = new ArrayList<ChordScale>() ;

        // for each type of chord, i.e note, power, triad, 7th, 9th, 11th, 13th,
        for ( int p = 1 ; p <= 7 ; p++ ) {
            if ( p == 2 ) continue; // ignore power chords
	        match.add(new ChordScale(key, p)) ;
        }

        // and eventually 6th, sus4th

        return match ;
    }

    public String name() {
        switch ( poly ) {
        	case 1: return super.name()+" scale" ;
        	case 2: return "power chords" ;
        	case 3: return "Triads" ;
        	case 4: return "Sevenths" ;
        	case 5: return "Ninths" ;
        	case 6: return "Elevenths" ;
        	case 7: return "Thirteenths" ;
        	default: return poly+" notes!" ;
        }
    }

    public String name(int degree) {
        String rootstr = super.name(degree);
        if ( poly == 1 ) return rootstr;	// single note
/*        int[] intervals = new int[poly-1]; // one less interval than poly
        // make a simple tertiary chord (stacked thirds) relative to the degree
        for ( int i = 0; i < intervals.length; i++ ) {
            intervals[i] = scale.interval(degree, degree+(2*(i+1)));
        }
        // !! degrees alias so intervals are fuxored !!!
        // unlike getDiaTonicChordNotes !!!
		for ( int i = 1; i < intervals.length; i++ ) {
            while ( intervals[i] < intervals[i-1] ) intervals[i] += OCTAVE;
        } */
        int[] intervals = scale.getTertiaryIntervals(degree, poly);
        Chord chord = Chord.withIntervals(intervals);
        if ( chord == null ) {
        //    System.out.println("at degree "+(1+degree)+", poly "+poly);
    	//    return rootstr+" ??";
	        return ""; //Interval.spell(intervals);
        }
		return rootstr+" "+chord.getSymbol();
    }

/*    public String name1(int degree) {
        String rootstr = super.name(degree);
        String typestr = "??" ;
        String altstr = "";

        if ( poly < 2 ) return rootstr ; 	// note
        if ( poly < 3 ) return rootstr+"5" ; // power chord

        // normalise the degree intervals relative to the chord root
        // to allow simple checking of 3rd, 5th intervals
        int third = scale.interval(degree, degree+3-1) ;
        int fifth = scale.interval(degree, degree+5-1) ;

		if ( poly == 3 ) { // triads
        	if ( third == Interval.MINOR_THIRD ) {
            	if ( fifth == Interval.PERFECT_FIFTH ) {
                	return rootstr+"m";
            	} else {
                	return rootstr+"dim";
            	}
        	} else {
            	if ( fifth == Interval.PERFECT_FIFTH ) {
                	return rootstr+"maj";
            	} else {
                	return rootstr+"aug";
            	}
        	}
        }

        if ( fifth == Interval.DIMINISHED_FIFTH ) {
            altstr = "-5";
        } else if ( fifth == Interval.AUGMENTED_FIFTH ) {
            altstr = "+5";
        }

        // now we're a seventh or extended chord
        int seventh = scale.interval(degree, degree+7-1) ;
        int ninth = scale.interval(degree, degree+2-1); // !! 9th == 2nd

       	if ( third == Interval.MINOR_THIRD ) {
        	// Minor
            if ( poly == 4 ) {
                if ( seventh == Interval.DIMINISHED_SEVENTH ) {
                    if ( fifth == Interval.DIMINISHED_FIFTH ) {
                        typestr = "dim7";
                    }
                } else if ( seventh == Interval.MINOR_SEVENTH ) {
                    if ( fifth == Interval.DIMINISHED_FIFTH ) {
                        typestr = "half";
                    } else if ( fifth == Interval.PERFECT_FIFTH ) {
                        typestr = "m7";
                    }
                } else if ( seventh == Interval.MAJOR_SEVENTH ) {
					if ( fifth == Interval.PERFECT_FIFTH ) {
	                    typestr = "min/maj7";
                    }
                }
            } else if ( poly == 5 ) {
                if ( seventh == Interval.MAJOR_SEVENTH ) {
					if ( fifth == Interval.PERFECT_FIFTH ) {
	                    typestr = "min/maj9";
                    }
                } else if ( seventh == Interval.MINOR_SEVENTH ) {
                    if ( ninth == Interval.MAJOR_SECOND ) {
                        typestr = "m9";
                    } else if ( ninth == Interval.MINOR_SECOND ) {
						typestr = "m7-9";
                    }
                }
            }
       	} else if ( third == Interval.MAJOR_THIRD ) {
        	if ( seventh == Interval.MINOR_SEVENTH ) {
            	// Dominant
                if ( poly == 4 ) {
		            typestr = "7"; // sevenths
                } else if ( poly == 5 ) {
                    // ninths, extended chords
                    if ( ninth == Interval.MINOR_SECOND ) {
						typestr = "7-9";
                    } else if ( ninth == Interval.MAJOR_SECOND) {
						typestr = "9";
                    } else if ( ninth == Interval.MINOR_THIRD) {
                        typestr = "7+9";
                    }
		        }
        	} else if ( seventh == Interval.MAJOR_SEVENTH ) {
            	// Major
                if ( poly == 4 ) {
                    typestr = "maj7";
                } else if ( poly == 5 ) {
                    typestr = "maj9";
                }
        	}
       	}

		return rootstr+typestr+altstr;
    } */

/*    public String name2(int degree)
    {
        String rootstr = super.name(degree);
        String triadstr = "??" ;

        if ( poly < 2 ) return rootstr ; 	// note
        if ( poly < 3 ) return rootstr+"5" ; // power chord

        // normalise the degree intervals relative to the chord root
        // to allow simple checking of 3rd, 5th intervals
        int third = scale.interval(degree, degree+3-1) ;
        int fifth = scale.interval(degree, degree+5-1) ;

//        System.out.println(degree+":"+third+","+fifth) ;
		// if the 5th is perfect it's major or minor
        if ( fifth == Interval.PERFECT_FIFTH )
        {
            if ( third == Interval.MAJOR_THIRD )
                triadstr = "maj" ;
            else if ( third == Interval.MINOR_THIRD )
                triadstr = "m" ;
        }
        // else if the 5th is diminished and the 3rd is minor it's diminished
        else if ( fifth == Interval.DIMINISHED_FIFTH &&
            	  third == Interval.MINOR_THIRD )
			triadstr = "o" ;
        // else if the 5th is augmented and the 3rd is major it's augmented
        else if ( fifth == Interval.AUGMENTED_FIFTH &&
            	  third == Interval.MAJOR_THIRD )
            triadstr = "+" ;

        // can now name the triads properly
        if ( poly < 4 ) return rootstr+triadstr ;

        int hideg = (poly*2)-1 ;

        String family = "?" ; // unknown family at start of search

        int seventh = scale.interval(degree, degree+7-1) ;

        if ( third == Interval.MINOR_THIRD )
        {
            if ( seventh == Interval.MINOR_SEVENTH ) family = "m" ;
        	else if ( seventh == Interval.MAJOR_SEVENTH ) family = "m/M" ;
            else if ( seventh == Interval.DIMINISHED_SEVENTH ) family = "o" ;
        }
        else if ( third == Interval.MAJOR_THIRD )
        {
         	if ( seventh == Interval.MINOR_SEVENTH ) family = "" ; // Dom.
        	else if ( seventh == Interval.MAJOR_SEVENTH ) family = "M" ;
        }

        String alts = "" ;
        if ( fifth == Interval.DIMINISHED_FIFTH ) alts = "-5" ;
        else if ( fifth == Interval.AUGMENTED_FIFTH ) alts ="+5" ;

        if ( poly < 5 ) return rootstr+family+hideg+alts ;

        return rootstr+family+hideg+"*" ;
    } */
}
