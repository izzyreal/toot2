/* Generated by Together */

package uk.org.toot.pitch;

/**
 * An immutable Chord. No mutators.
 */
public class Chord
{
    private String symbol;		// e.g. maj7
    private String spelling;	// e.g. 1 3 5 7
    private String name;		// e.g. major seventh
    private int[]  intervals; 	// derived from spelling

    public Chord(String aSymbol, String aSpelling, String aName) {
        symbol = aSymbol;
        spelling = aSpelling;
        name = aName;
        decodeIntervals(spelling);
    }

    void decodeIntervals(String aSpelling) {
		String[] degrees = aSpelling.split("\\s");
        intervals = new int[degrees.length];
	    for (int i = 0; i < intervals.length; i++) {
        	intervals[i] = Interval.spelt(degrees[i]);
        }
    }

    public String getSymbol() { return symbol; }

    public String getSpelling() { return spelling; }

    public String getName() { return name; }

    public int[] getIntervals() { return intervals; }

    public int getPoly() { return intervals.length; }

    public boolean isDiatonic(int[] someIntervals) {
        if ( intervals.length != someIntervals.length ) return false;
        for ( int i = 0; i < intervals.length; i++ ) {
            if ( intervals[i] != someIntervals[i] ) {
            	return false; // fast false return
            }
        }
        return true; // interval arrays are identical
    }
    
    /**
     * Return true if every interval of this chord is contained within
     * the chordMode
     * @param chordMode
     * @return
     */
    public boolean matchesChordMode(int[] chordMode) {
    	for ( int i = 0; i < intervals.length; i++ ) {
    		if ( !ChordMode.hasInterval(chordMode, intervals[i])) {
    			return false; // fast failure
    		}
    	}
    	return true;
    }
    
    public String toString() {
    	return getSymbol();
    }
    
    public static class AndRoot
    {
    	private int root;
    	private Chord chord;
    	
    	public AndRoot(Chord chord, int root) {
    		this.chord = chord;
    		this.root = root;
    	}
    	
    	public int getRoot() {
    		return root;
    	}
    	
    	public Chord getChord() {
    		return chord;
    	}
    	
    	public String toString() {
    		return PitchClass.name(root)+chord.getSymbol();
    	}    	
    }    
}
