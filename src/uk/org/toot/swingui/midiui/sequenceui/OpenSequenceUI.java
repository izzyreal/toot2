/* Generated by TooT */

package uk.org.toot.swingui.midiui.sequenceui;

import java.awt.Color;
import java.awt.FlowLayout;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import javax.swing.Timer;
import javax.swing.JToolBar;
import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;
import uk.org.toot.midi.sequence.Midi;
import uk.org.toot.midi.sequence.MidiSequence;
import uk.org.toot.midi.sequence.SequencePosition;
import uk.org.toot.midi.sequence.edit.SequenceSelection;
import uk.org.toot.midi.sequencer.MidiSequencer;
import uk.org.toot.midi.sequence.NameEvent;
import javax.swing.JLabel;
import uk.org.toot.swingui.miscui.ClickAdapter;
import uk.org.toot.swingui.miscui.DynamicPopup;

public class OpenSequenceUI {

	private MidiSequencer sequencer;
	private MidiSequence sequence;
	private PropertyChangeSupport propertyChangeSupport;
	private Timer timer;
	private long lastTick = -1;

	public OpenSequenceUI(MidiSequencer sequencer) {
		this.sequencer = sequencer;
		sequence = sequencer.getMidiSequence();
		init();
	}

	public MidiSequence getSequence() {
		return sequence;
	}

	public MidiSequencer getSequencer() {
		return sequencer;
	}

	protected void init() {
		propertyChangeSupport = new PropertyChangeSupport(this);
		timer = new Timer(84, new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				timedUpdate();
			}
		});
		timer.start();
	}

	public void addPropertyChangeListener(PropertyChangeListener listener) {
		propertyChangeSupport.addPropertyChangeListener(listener);
	}

	public void addPropertyChangeListener(String property, PropertyChangeListener listener) {
		propertyChangeSupport.addPropertyChangeListener(property, listener);
	}

	public void removePropertyChangeListener(PropertyChangeListener listener) {
		propertyChangeSupport.removePropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(String property, PropertyChangeListener listener) {
		propertyChangeSupport.removePropertyChangeListener(property, listener);
	}

	protected void timedUpdate() {
		if ( sequencer == null ||     // no sequencer
				!sequencer.isRunning() ) // not running
				return ;
		updatePosition();
	}

	protected void updatePosition() {
		long tick = sequencer.getTickPosition() ;
		if ( tick == lastTick ) return ; // no change
		lastTick = tick;
		// note we misuse the PropertyChangeSupport
		// raw and processed instead of old and new
		SequencePosition pos = sequence.getPosition(tick);
		propertyChangeSupport.firePropertyChange("position", new Long(tick), pos);
		long microsecondPos = sequencer.getMicrosecondPosition();
		String timepos = " "+Midi.timePosition(microsecondPos);
		propertyChangeSupport.firePropertyChange("time", new Long(microsecondPos), timepos);
	}

	public void close() {
		timer.stop();
	}

	private SequenceSelection selection;

	protected SequenceSelection getSelection() {
		if ( selection == null ) {
			selection = new SequenceSelection(getSequence());
		}
		return selection;
	}

	public void setSelection(SequenceSelection sel) {
		selection = sel;
	}

	public TrackTableModel getTrackTableModel() {
		if ( trackTableModel == null )
			trackTableModel = new TrackTableModel(getSequence(), sequencer);
		return trackTableModel;
	}

	/*    protected void preProgramSynth() {
        MidiTrack[] tracks = sequence.getTracks();
        for ( int i = 1; i < tracks.length; i++ ) {
            MidiTrack track = tracks[i];
            int chan = track.getChannel();
            if ( chan < 0 ) continue;
            int program = track.getProgram();
            MidiChannel channel = getSequencer().getSynthesizer().getChannels()[chan]; //!!
            channel.programChange(program);
        }
    } */

	/*    public SequenceHistoryView createHistoryView() {
        return new SequenceHistoryView(getSequence().getHistory());
    } */

//	public void setHistoryView(SequenceHistoryView historyView){ this.historyView = historyView; }

//	private TrackPopupMenu trackPopupMenu;
	private TrackTableModel trackTableModel;

	public JPopupMenu getMarkerPopupMenu() {
		return new MarkerPopupMenu();
	}

	public class MarkerPopupMenu extends DynamicPopup
	{
		protected void refreshMenu() {
			removeAll();
			NameEvent[] markers = getSequence().getMarkers();
			for (int m = 0; m < markers.length; m++) {
				add(new GotoItem(markers[m]));
			}
//			Log.debug(markers.length+" markers added to MarkerPopupMenu");
		}

		private class GotoItem extends JMenuItem implements ActionListener{
			private NameEvent event;

			public GotoItem(NameEvent event) {
				super(event.getName());
				this.event = event;
				addActionListener(this);
			}

			public void actionPerformed(ActionEvent e) {
				long tick = event.getTick();
				sequencer.setTickPosition(tick);
//				System.out.println("Positioning to "+visible.x+", "+visible.y+"  for bar "+(1+getSequence().getPosition(event.getTick()).bar));
			}
		}

	}

	public JToolBar getPositionView() {
		return new PositionView();
	}

	public class PositionView extends JToolBar
	{
		private JLabel barPosBigL;
		private JLabel timePosBigL;

		public PositionView() { this(true, true); }

		public PositionView(boolean bTime, boolean bBars) {
			super("Position");
			MouseAdapter popupAdapter = new ClickAdapter(getMarkerPopupMenu());
			setLayout(new FlowLayout(FlowLayout.LEFT));
			if (bTime) {
				timePosBigL = new JLabel("");
				timePosBigL.setFont(timePosBigL.getFont().deriveFont(16f));
				timePosBigL.setToolTipText("minutes, seconds, tenths");
				timePosBigL.addMouseListener(popupAdapter);
				add(timePosBigL);
			}
			if (bTime && bBars) {
				addSeparator();
			}
			if (bBars) {
				barPosBigL = new JLabel("");
				barPosBigL.setFont(barPosBigL.getFont().deriveFont(18f));
				barPosBigL.setForeground(Color.blue);
				barPosBigL.setToolTipText("bars, beats, sixteenths");
				barPosBigL.addMouseListener(popupAdapter);
				add(barPosBigL);
			}

			OpenSequenceUI.this.addPropertyChangeListener("position", new PropertyChangeListener() {
				public void propertyChange(PropertyChangeEvent evt) {
					updatePosition((SequencePosition)evt.getNewValue());
				}
			});
		}

		protected void updatePosition() {
			String timepos = " "+Midi.timePosition(sequencer.getMicrosecondPosition());
			timePosBigL.setText(timepos+" ");
		}

		protected void updatePosition(SequencePosition pos) {
			updatePosition(); // for the time
			barPosBigL.setText(" "+pos+" ") ;
		}


	}
}
