/* Generated by TooT */

package uk.org.toot.swingui.midiui.sequenceui;

import uk.org.toot.midi.sequence.MidiSequence;
import uk.org.toot.midi.sequence.MidiTrack;

import java.awt.event.MouseEvent;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.Graphics; // !!!
import java.awt.Color; // !!!

public class TruncateTool extends PaletteTool {

    public TruncateTool(Editor editor) {
        super("Truncate", "Crosshair16", null, null, editor);
    }

    protected Cursor createCursor(String cursorName, Point hot) {
        return Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
    }

    public void mouseDragged(MouseEvent e) {
        if ( press == null ) return;
        if ( e.getSource() != press.getSource() ) return;
        super.mouseDragged(e);
        drawLine(e);
    }

    public void mouseReleased(MouseEvent e) {
        if ( press == null ) return;
        SequenceView view = (SequenceView)e.getSource();
        if ( e.getSource() == press.getSource() ) {
//    	    try {
    		    MidiSequence sequence = view.getSequence();
        		long releaseTick = view.tick(e.getX(), e.getY());
//			        int noteval = view.midiy(e.getY());
        			MidiTrack track = view.getTopTrack();
/*	        		MidiTrack track = sequence.getTracks()[trk]; // active track
	    	    	int chan = track.getChannel();               // track channel
	    	    	int velocity = 100; // !!!                   // !! previous?
    			    // note on
	        		MidiMessage on = ChannelMsg.create(ChannelMsg.NOTE_ON, chan, press.getValue(), velocity);
	        		// note off
	    		    MidiMessage off = ChannelMsg.create(ChannelMsg.NOTE_OFF, chan, press.getValue(), velocity);
                    MidiNote note = new MidiNote(
                        new MidiEvent(on, view.snap(press.getTick())),
                        new MidiEvent(off, releaseTick));
                    TrackSelection notesel = new TrackSelection(track, note);
                    sequence.edit(new Truncate(notesel)); */
                sequence.fireChanged();
/*        	} catch (InvalidMidiDataException ex) {
            	Log.exception(ex);
	        } */
        }
        press = null;
    }

    // !!! !!! a tool shouldn't need to know its implementation view !!! !!!
    protected void drawLine(MouseEvent e) {
        if ( press == null ) return;
        // don't reset press when outside component, may move back
        if ( e.getSource() != press.getSource() ) return;
        SequenceTimeView view = (SequenceTimeView)e.getSource();
        Graphics g = view.getGraphics();
        // draw a line XOR mode
        g.setXORMode(Color.black);
        g.setColor(Color.white);
        // first erase old
    	int x = press.getX();
        int y = press.getY();
        g.drawLine(x, y, drag.x, drag.y);
        // then draw new
        drag.x = e.getX();
        drag.y = e.getY();
        g.drawLine(x, y, drag.x, drag.y);
        // remember to dispose
        g.dispose();
    }
}
