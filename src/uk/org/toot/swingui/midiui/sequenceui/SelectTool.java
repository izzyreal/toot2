/* Generated by TooT */

package uk.org.toot.swingui.midiui.sequenceui;

import java.awt.event.MouseEvent;
import uk.org.toot.midi.sequence.MidiNote;
import uk.org.toot.midi.sequence.MidiSequence;
import uk.org.toot.midi.sequence.MidiTrack;
import uk.org.toot.midi.sequence.edit.SequenceSelection;
import uk.org.toot.midi.sequence.edit.TrackSelection;
import uk.org.toot.midi.sequence.edit.Move;
import uk.org.toot.midi.sequence.edit.Copy;
import uk.org.toot.swingui.midiui.sequenceui.PaletteTool;


public class SelectTool extends PaletteTool {

    static public final int SELECT = 1;
    static public final int MOVE = 2;
    private int dragMode;

    public SelectTool(Editor editor) { super("Select", "Select16", null, null, editor); }

    public void mousePressed(MouseEvent e) {
        super.mousePressed(e);
        dragMode = ( getTrack() != null ) ? MOVE : SELECT;
        // if SELECT quantize Press x, y to ticks
        // but view dependant so not here
    }

    public void mouseDragged(MouseEvent e) {
        if ( press == null ) return;
        if ( e.getSource() != press.getSource() ) return;
        if ( distanceSquared(press.getX(), press.getY(), e.getX(), e.getY()) < 4 ) return;
        super.mouseDragged(e);
        switch ( dragMode ) {
	        case SELECT: drawSelectionArea(e); 	break;
    	    case MOVE:   selectionMoved(e); 	break;
        }
    }

    public void mouseReleased(MouseEvent e) {
        if ( press == null ) return;
        if ( e.getSource() != press.getSource() ) {
            press = null;
            return;
        }
        SequenceView view = (SequenceView)e.getSource();
        MidiSequence sequence = view.getSequence();
        // !!! !!! PaletteTool.getSelection() may return TrackSelection !!!
        SequenceSelection selection = view.getSelection();
        if ( wasDragged() ) {
			switch ( dragMode ) {
            case SELECT:
                MidiTrack topTrack = view.getTopTrack(); // !! bounds
		        TrackSelection trackSel = selection.getTrack(topTrack);
                for ( MidiNote note : getMatches(e) ) {
                    trackSel.select(note);
            	}
    			break;
            case MOVE:
                int modifiers = e.getModifiersEx();
            	// next 2 values should equal selectionMoved calculated values !!!
            	long ticks = view.snap(ticks(e));
                int semitones = semitones(e);
                int mod = MouseEvent.CTRL_DOWN_MASK;
                try {
	                if ( (modifiers & mod) == mod ) {
//    	                System.out.println("Copying...");
        	            sequence.edit(new Copy(getSelection(), ticks, semitones));
                        // doh - selection fixup needs to happen on execute/unexcute!
                        // execute - copy selection -> selection
                        // unexecute - restore selection (don't have it ATM!)
//            	        view.setSelection((SequenceSelection)copy.getSelection().clone()); // reset selection
                	} else {
//                    	System.out.println("Moving...");
		                sequence.edit(new Move(getSelection(), ticks, semitones));
    	            }
		        } catch (CloneNotSupportedException cnse) {
    	        }
            	break;
            }
        } else { // wasn't dragged
        	MidiTrack pressTrack = getTrack();
            if ( pressTrack != null ) {
	        	if ( pressTrack != view.getTopTrack() ) {
    	        	view.setTopTrack(pressTrack); // just raise, don't select
        		} else { // top track to really select
	                int x = e.getX();
                    int y = e.getY();
			        long tick = view.tick(x, y);
			        int n = view.note(x, y);
	        	    MidiNote note = view.match(pressTrack, tick, n, false);
			        TrackSelection trackSel = selection.getTrack(pressTrack);
       	        	trackSel.select(note);
        		}
    		} else { // wasn't dragged and no match on any track
            	selection.clear();
    		}
        }

        selection.fireChanged();
        press = null;
    }

}
