/* Generated by TooT */

package uk.org.toot.swingui.midiui.sequenceui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Component;
import uk.org.toot.swingui.midiui.sequenceui.PitchView;
import java.awt.event.MouseEvent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

class GridPane extends JPanel
    implements Dividable
{
    /**
     * @link aggregation
     * @supplierCardinality 1 
     */
    private DomainSplitView child;
    private PitchView.PitchHeader pitchHdr = null; // !!! not here

    public GridPane(DomainSplitView splitView, JScrollPane primaryView) {
		super(new BorderLayout());
        this.child = splitView;
        Component yHdr = primaryView.getRowHeader().getView();
        if ( yHdr instanceof PitchView.PitchHeader ) {
        	this.pitchHdr = (PitchView.PitchHeader)yHdr;
        }
		setPreferredSize(new Dimension(10000, 10000)); // !!!?
    	add(new GridPaneBar(splitView.getTopView()), BorderLayout.NORTH);
        add(splitView, BorderLayout.CENTER);
    }

    // a degenerate copy of SplitView
    public void adjustDivider() {
        boolean visible = true; // default assumption
        boolean wasVisible = isVisible();

        if ( child.isVisible() ) {
            visible = true;
        } else { // not visible special case
        	visible = false;
        }
        setVisible(visible);
        if ( visible != wasVisible ) {
            if ( getParent() instanceof Dividable ) {
                ((Dividable)getParent()).adjustDivider();
            }
        }
    }

    private class GridPaneBar extends EditBar
    {
        public GridPaneBar(SequenceView view) {
            super(view);
        }

        public void mouseMoved(MouseEvent mev) {
            super.mouseMoved(mev);
            if ( pitchHdr != null ) {
		        SequenceView view = (SequenceView)mev.getSource();
                pitchHdr.setCursorAt(view.note(mev.getX(), mev.getY()));
            }
        }

        public void mouseExited(MouseEvent mev) {
            super.mouseExited(mev);
			if ( pitchHdr != null ) {
                pitchHdr.setCursorAt(-1);
            }
        }
    }
}


