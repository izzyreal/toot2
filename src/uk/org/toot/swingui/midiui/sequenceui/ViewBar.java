/* Generated by TooT */

package uk.org.toot.swingui.midiui.sequenceui;

import java.awt.Dimension;
import java.awt.Insets;
import uk.org.toot.midi.sequence.MidiSequence;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import javax.swing.Box;
import javax.swing.JTextField;
import javax.swing.JLabel;
import uk.org.toot.swingui.miscui.TootBar;

class ViewBar extends TootBar
{
    protected SequenceView view;
    private JTextField noteLabel;
    private JTextField barPosLabel;

    public ViewBar(SequenceView view) {
        super();
        this.view = view;
        // for old-style buttons
   		putClientProperty("JToolBar.isRollover", Boolean.FALSE);
        setFloatable(false);
        fillLeft();
        fillRight();
//                setBackground(Color.white);
        view.addMouseMotionListener(
            new MouseMotionAdapter() {
			    public void mouseMoved(MouseEvent mev) {
                    ViewBar.this.mouseMoved(mev);
                }
        	}
        );
        view.addMouseListener(
            new MouseAdapter() {
			    public void mouseExited(MouseEvent mev) {
                    ViewBar.this.mouseExited(mev);
                }
        	}
        );
    }

    protected void fillLeft() {
        add(new TopTrackLabel(view));
    	addSeparator();
    }

    protected void fillRight() {
        add(Box.createHorizontalGlue());
		Insets insets = new Insets(0, 10, 0, 10);
        Dimension size = new Dimension(100,24);
		barPosLabel = new JTextField();
        barPosLabel.setMargin(insets);
        barPosLabel.setPreferredSize(size);
        barPosLabel.setMaximumSize(size); // !!?
        barPosLabel.setMinimumSize(size); // !!?
        add(barPosLabel);
        add(new JLabel("   "));
        noteLabel = new JTextField();
        noteLabel.setMargin(insets);
		noteLabel.setMaximumSize(size);   // !!?
		noteLabel.setMinimumSize(size);   // !!?
        noteLabel.setPreferredSize(size);
        add(noteLabel);
	}

    public void mouseMoved(MouseEvent mev) {
        SequenceView view = (SequenceView)mev.getSource();
        MidiSequence sequence = view.getSequence();
        int x = mev.getX();
        int y = mev.getY();
        int noteVal = view.note(x, y);
		noteLabel.setText(view.noteName(noteVal));
        long ticks = view.tick(x, y);
        if ( ticks >= 0 ) {
        	barPosLabel.setText(sequence.getPosition(ticks).toString());
        } else {
            barPosLabel.setText("---");
        }
    }

    public void mouseExited(MouseEvent mev) {
        noteLabel.setText("");
        barPosLabel.setText("");
    }
}


